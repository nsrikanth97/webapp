name: Create AMI


on:
  push:
    branches:
      - main

jobs:
  create-ami:
    runs-on: ubuntu-latest

    steps:
      - name : Checkout code
        uses: actions/checkout@v4

      - name: Setup up java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Verify java version
        run: java -version

      - name: Verify maven version
        run: mvn -version

      - name: Stop MySql
        run: |
          sudo service mysql stop
          sudo apt-get update

      - name: Set up MariaDB
        uses: getong/mariadb-action@v1.1
        with:
          host port: ${{vars.DB_PORT}}
          mysql database: ${{ vars.DB_NAME}}
          mysql root password: ${{ secrets.DB_PASS }}

      - name: Build with Maven
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_PORT: ${{ vars.DB_PORT }}
          FILE_PATH: ${{ vars.FILE_PATH }}
          LOG_FILE_PATH: ${{ vars.LOG_FILE_PATH }}
          YOUR_DOMAIN_NAME: ${{ secrets.YOUR_DOMAIN_NAME }}
          API_KEY : ${{ secrets.API_KEY }}
          SG_API_KEY : ${{secrets.SG_API_KEY}}
          TEMPLATE_ID: ${{vars.TEMPLATE_ID}}
          TOPIC_ARN: ${{vars.TOPIC_ARN}}
          REGION: ${{vars.AWS_REGION}}
        run: mvn clean install


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Packer init
        run: packer init ./packer/.

      - name: Packer validate
        run: packer validate ./packer/.

      - name: Packer Build
        run: packer build 
              -var "source_path_jar=target/csye6225-0.0.1-SNAPSHOT.jar"  
              -var "source_ami=${{vars.debian_id}}" 
              -var "aws_region=${{vars.aws_region}}" 
              -var "subnet_id=${{vars.subnet_id}}"
              -var "ssh_username=${{vars.ssh_username}}"
              packer/.

      - name: Change the credentials to root
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ROOT_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ROOT_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update the launch template and initiate the instance refresh for autoscaling group
        run: |
          image_id=$(aws ec2 describe-images --owners "921922858617" --filters "Name=name,Values=csye6225_2023_*" --query 'sort_by(Images, &CreationDate)[-1].ImageId')
          echo "Image ID: $image_id"
          launch_template_response=$(aws ec2 create-launch-template-version --launch-template-id ${{vars.LAUNCH_TEMPLATE_ID}} --source-version ${{vars.LAUNCH_TEMPLATE_VERSION}} --launch-template-data "{\"ImageId\":$image_id}")
          version_number=$(echo $launch_template_response | jq -r '.LaunchTemplateVersion.VersionNumber')
          echo "Launch Template Version: $version_number"
          aws ec2 modify-launch-template --launch-template-id ${{vars.LAUNCH_TEMPLATE_ID}} --default-version $version_number --region ${{secrets.AWS_REGION}}     
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --preferences "{\"InstanceWarmup\":180,\"MinHealthyPercentage\":100}" --strategy Rolling
          sleep 20

      - name: Wait for instance refresh to complete
        run: |
          instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --region ${{secrets.AWS_REGION}} --query 'InstanceRefreshes[?StartTime!=`null`] | sort_by(@, &StartTime)[-1].Status' --output text)
          while [ "$instance_refresh_status" != "Successful" ]
          do
            echo "Instance refresh status: $instance_refresh_status"
            sleep 10
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{vars.AUTO_SCALING_GROUP_NAME}} --region ${{secrets.AWS_REGION}} --query 'InstanceRefreshes[?StartTime!=`null`] | sort_by(@, &StartTime)[-1].Status' --output text)
            if [ "$instance_refresh_status" == "Failed" ] || ["$instance_refresh_status" == "Cancelled" ]
            then
              echo "Instance refresh failed or cancelled"
              exit 1
            fi
          done
          echo "Instance refresh status: $instance_refresh_status"
          echo "Instance refresh completed successfully"



          





